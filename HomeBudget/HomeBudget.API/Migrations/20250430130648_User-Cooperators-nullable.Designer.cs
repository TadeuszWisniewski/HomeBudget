// <auto-generated />
using System;
using HomeBudget.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HomeBudget.API.Migrations
{
    [DbContext(typeof(HomeBudgetDbContext))]
    [Migration("20250430130648_User-Cooperators-nullable")]
    partial class UserCooperatorsnullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AccountExpense", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExpensesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountsId", "ExpensesId");

                    b.HasIndex("ExpensesId");

                    b.ToTable("AccountExpense");
                });

            modelBuilder.Entity("AccountIncome", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IncomesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountsId", "IncomesId");

                    b.HasIndex("IncomesId");

                    b.ToTable("AccountIncome");
                });

            modelBuilder.Entity("AccountTransfer", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TransfersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountsId", "TransfersId");

                    b.HasIndex("TransfersId");

                    b.ToTable("AccountTransfer");
                });

            modelBuilder.Entity("BudgetExpense", b =>
                {
                    b.Property<Guid>("BudgetsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExpenseSubsortsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("BudgetsId", "ExpenseSubsortsId");

                    b.HasIndex("ExpenseSubsortsId");

                    b.ToTable("BudgetExpense");
                });

            modelBuilder.Entity("DebtUser", b =>
                {
                    b.Property<Guid>("DebtsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("DebtsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("DebtUser");
                });

            modelBuilder.Entity("ExpenseExpenseSort", b =>
                {
                    b.Property<Guid>("ExpenseSortsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ExpensesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpenseSortsId", "ExpensesId");

                    b.HasIndex("ExpensesId");

                    b.ToTable("ExpenseExpenseSort");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Accounts.Account", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Accounts.Transfer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("DebtId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("DebtId");

                    b.ToTable("Transfers");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Budgets.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("BudgetDurationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BudgetTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("BudgetDurationId");

                    b.HasIndex("BudgetTypeId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Budgets");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Budgets.BudgetDuration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("BudgetDurations");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Budgets.BudgetType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("BudgetTypes");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Currencies.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Sign")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Debts.Debt", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Debts");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Expenses.Expense", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Expenses");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Expenses.ExpenseSort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ExpenseSubsortId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("ExpenseSubsortId")
                        .IsUnique();

                    b.ToTable("ExpenseSorts");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Expenses.ExpenseSubsort", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("ExpenseSubsorts");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Incomes.Income", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Amount")
                        .HasPrecision(9, 2)
                        .HasColumnType("decimal(9,2)");

                    b.Property<Guid>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.ToTable("Incomes");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Incomes.IncomeSource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("IncomeSubsourceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("IncomeSubsourceId")
                        .IsUnique();

                    b.ToTable("IncomeSources");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Incomes.IncomeSubsource", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("IncomeSubsource");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CoOperatorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("UserTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CoOperatorId");

                    b.HasIndex("UserTypeId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Users.UserType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("UserTypes");
                });

            modelBuilder.Entity("IncomeIncomeSource", b =>
                {
                    b.Property<Guid>("IncomeSourcesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("IncomesId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IncomeSourcesId", "IncomesId");

                    b.HasIndex("IncomesId");

                    b.ToTable("IncomeIncomeSource");
                });

            modelBuilder.Entity("UserAccount", b =>
                {
                    b.Property<Guid>("AccountsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("AccountsId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserAccount");
                });

            modelBuilder.Entity("UserExpense", b =>
                {
                    b.Property<Guid>("ExpensesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ExpensesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserExpense");
                });

            modelBuilder.Entity("UserIncome", b =>
                {
                    b.Property<Guid>("IncomesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("IncomesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("UserIncome");
                });

            modelBuilder.Entity("AccountExpense", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Expenses.Expense", null)
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountIncome", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Incomes.Income", null)
                        .WithMany()
                        .HasForeignKey("IncomesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("AccountTransfer", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Accounts.Transfer", null)
                        .WithMany()
                        .HasForeignKey("TransfersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetExpense", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Budgets.Budget", null)
                        .WithMany()
                        .HasForeignKey("BudgetsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Expenses.ExpenseSubsort", null)
                        .WithMany()
                        .HasForeignKey("ExpenseSubsortsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("DebtUser", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Debts.Debt", null)
                        .WithMany()
                        .HasForeignKey("DebtsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ExpenseExpenseSort", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Expenses.ExpenseSort", null)
                        .WithMany()
                        .HasForeignKey("ExpenseSortsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Expenses.Expense", null)
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Accounts.Account", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Currencies.Currency", "Currency")
                        .WithMany("Accounts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Accounts.Transfer", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Currencies.Currency", "Currency")
                        .WithMany("Transfers")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Debts.Debt", "Debt")
                        .WithMany("Transfers")
                        .HasForeignKey("DebtId");

                    b.Navigation("Currency");

                    b.Navigation("Debt");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Budgets.Budget", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Budgets.BudgetDuration", "BudgetDuration")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetDurationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Budgets.BudgetType", "BudgetType")
                        .WithMany("Budgets")
                        .HasForeignKey("BudgetTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Currencies.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BudgetDuration");

                    b.Navigation("BudgetType");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Debts.Debt", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Accounts.Account", "Account")
                        .WithMany("Debts")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Currencies.Currency", "Currency")
                        .WithMany("Debts")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Expenses.Expense", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Currencies.Currency", "Currency")
                        .WithMany("Expenses")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Expenses.ExpenseSort", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Expenses.ExpenseSubsort", "ExpenseSubsort")
                        .WithOne("ExpenseSort")
                        .HasForeignKey("HomeBudget.API.Models.Domain.Expenses.ExpenseSort", "ExpenseSubsortId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExpenseSubsort");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Incomes.Income", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Currencies.Currency", "Currency")
                        .WithMany("Incomes")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Incomes.IncomeSource", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Incomes.IncomeSubsource", "IncomeSubsource")
                        .WithOne("IncomeSource")
                        .HasForeignKey("HomeBudget.API.Models.Domain.Incomes.IncomeSource", "IncomeSubsourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IncomeSubsource");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Users.User", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Users.User", "CoOperator")
                        .WithMany("Cooperators")
                        .HasForeignKey("CoOperatorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("HomeBudget.API.Models.Domain.Users.UserType", "UserTypes")
                        .WithMany("Users")
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoOperator");

                    b.Navigation("UserTypes");
                });

            modelBuilder.Entity("IncomeIncomeSource", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Incomes.IncomeSource", null)
                        .WithMany()
                        .HasForeignKey("IncomeSourcesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Incomes.Income", null)
                        .WithMany()
                        .HasForeignKey("IncomesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UserAccount", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UserExpense", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Expenses.Expense", null)
                        .WithMany()
                        .HasForeignKey("ExpensesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("UserIncome", b =>
                {
                    b.HasOne("HomeBudget.API.Models.Domain.Incomes.Income", null)
                        .WithMany()
                        .HasForeignKey("IncomesId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("HomeBudget.API.Models.Domain.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Accounts.Account", b =>
                {
                    b.Navigation("Debts");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Budgets.BudgetDuration", b =>
                {
                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Budgets.BudgetType", b =>
                {
                    b.Navigation("Budgets");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Currencies.Currency", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Debts");

                    b.Navigation("Expenses");

                    b.Navigation("Incomes");

                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Debts.Debt", b =>
                {
                    b.Navigation("Transfers");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Expenses.ExpenseSubsort", b =>
                {
                    b.Navigation("ExpenseSort");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Incomes.IncomeSubsource", b =>
                {
                    b.Navigation("IncomeSource");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Users.User", b =>
                {
                    b.Navigation("Cooperators");
                });

            modelBuilder.Entity("HomeBudget.API.Models.Domain.Users.UserType", b =>
                {
                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
